name: STAG Deployment

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  prerelease-and-deploy:
    runs-on: ubuntu-latest
    environment: staging
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install release-please
        run: npm install -g release-please

      - name: Get current tag or create prerelease
        id: release
        run: |
          # Check if this is triggered by a tag push
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/tags/* ]]; then
            # Extract tag name from ref
            TAG_NAME=${GITHUB_REF#refs/tags/}
            echo "Using existing tag: $TAG_NAME"
            echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          else
            # Create prerelease tag for staging using release-please
            echo "Creating prerelease tag for staging using release-please..."
            
            # Get current version from package.json
            currentVersion=$(cat package.json | jq -r '.version')
            echo "Current version: $currentVersion"
            
            # Create manifest file
            cat > .release-please-manifest.json << EOF
            {
              ".": "$currentVersion"
            }
            EOF
            
            # Get the current commit SHA as bootstrap-sha
            BOOTSTRAP_SHA=${{ github.sha }}
            echo "Using current commit as bootstrap-sha: $BOOTSTRAP_SHA"
            
            # Create temporary release-please config for stag environment
            cat > release-please-prerelease.json << 'EOF'
            {
              "$schema": "https://raw.githubusercontent.com/googleapis/release-please/main/schemas/config.json",
              "bootstrap-sha": "BOOTSTRAP_SHA_PLACEHOLDER",
              "include-component-in-tag": false,
              "changelog-path": "CHANGELOG.md",
              "branches": [
                { 
                  "branch": "main", 
                  "prerelease": true,
                  "prerelease-label": "stag"
                }
              ],
              "packages": {
                ".": {
                  "release-type": "node",
                  "package-name": "react-webpack-demo",
                  "prerelease": true,
                  "prerelease-type": "stag",
                  "extra-files": [
                    "package.json"
                  ]
                }
              }
            }
            EOF
            
            # Replace the placeholder with actual bootstrap SHA
            sed -i "s/BOOTSTRAP_SHA_PLACEHOLDER/$BOOTSTRAP_SHA/g" release-please-prerelease.json
            
            # Use release-please to create the prerelease
            if npx release-please github-release \
              --config-file=release-please-prerelease.json \
              --manifest-file=.release-please-manifest.json \
              --repo-url=${{ github.server_url }}/${{ github.repository }} \
              --token=${{ secrets.GITHUB_TOKEN }} \
              --target-branch=main \
              --prerelease; then
              
              echo "✅ Release-please completed successfully!"
              
              # Get the new version from updated manifest
              newVersion=$(cat .release-please-manifest.json | jq -r '."."')
              newTag="v$newVersion"
              
              echo "🏷️ Release-please calculated new version: $newVersion"
              echo "📦 Version progression: $currentVersion → $newVersion"
              
              # Create local tag if it doesn't exist
              if ! git tag -l | grep -q "^$newTag$"; then
                echo "🏷️ Creating local tag: $newTag"
                git tag $newTag
              else
                echo "🏷️ Local tag already exists: $newTag"
              fi
              
              # Push the tag
              echo "📤 Pushing tag to trigger stag deployment..."
              git push origin $newTag
              
              echo "tag_name=$newTag" >> $GITHUB_OUTPUT
              
            else
              echo "⚠️ No release created - using latest existing tag"
              TAG_NAME=$(git describe --tags --abbrev=0)
              echo "Using latest tag: $TAG_NAME"
              echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
            fi
            
            # Cleanup
            rm -f release-please-prerelease.json
            rm -f .release-please-manifest.json
          fi

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Run tests
        run: npm test --if-present

      - name: Build for STAG
        run: |
          echo "Building for STAG environment..."
          echo "Tag: ${{ steps.release.outputs.tag_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Build completed successfully for STAG!"

      - name: Simulate STAG Deployment
        run: |
          echo "Simulating STAG deployment..."
          echo "Environment: STAG"
          echo "Tag: ${{ steps.release.outputs.tag_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "✅ STAG deployment simulation completed!"

      - name: Notify STAG deployment success
        run: |
          echo "✅ STAG deployment completed successfully!"
          echo "Environment: STAG"
          echo "Tag: ${{ steps.release.outputs.tag_name }}"
          echo "Commit: ${{ github.sha }}"
          # Add Mattermost/Slack notification here
