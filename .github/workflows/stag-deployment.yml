name: STAG Deployment

on:
  push:
    branches:
      - "main"
    tags:
      - 'v*-stag*'

jobs:
  create-tag:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write   # needed to push tags
    outputs:
      tag: ${{ steps.version.outputs.tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install release-please
        run: npm install -g release-please

      - name: Compute next staging prerelease version
        id: version
        run: |
          # Use release-please to get the next version for the main branch (configured as prerelease)
          OUTPUT=$(release-please release-pr \
            --repo-url="https://github.com/${{ github.repository }}" \
            --token="${{ secrets.GITHUB_TOKEN }}" \
            --dry-run \
            --json)

          echo "$OUTPUT"

          # Extract version from the output
          NEXT_VERSION=$(echo "$OUTPUT" | jq -r '.version // empty')
          
          # Fallback to package.json version if release-please doesn't return a version
          if [ -z "$NEXT_VERSION" ] || [ "$NEXT_VERSION" = "null" ]; then
            CURRENT_VERSION=$(node -p "require('./package.json').version")
            echo "Using package.json version as fallback: $CURRENT_VERSION"
            NEXT_VERSION="${CURRENT_VERSION}-stag.1"
          fi
          
          echo "Next staging version: $NEXT_VERSION"
          echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_ENV
          echo "tag=v${NEXT_VERSION}" >> $GITHUB_OUTPUT

      - name: Create and push tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          TAG="v${NEXT_VERSION}"
          echo "Creating tag: $TAG"
          git tag $TAG
          git push origin $TAG

  deploy-stag:
    runs-on: ubuntu-latest
    needs: [create-tag]
    if: always() && (needs.create-tag.result == 'success' || github.event_name == 'push' && startsWith(github.ref, 'refs/tags/'))
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Run tests
        run: npm test --if-present

      - name: Build for STAG
        run: |
          echo "Building for STAG environment..."
          echo "Tag: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Build completed successfully for STAG!"

      - name: Simulate STAG Deployment
        run: |
          echo "Simulating STAG deployment..."
          echo "Environment: STAG"
          echo "Tag: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "✅ STAG deployment simulation completed!"

      - name: Notify STAG deployment success
        run: |
          echo "✅ STAG deployment completed successfully!"
          echo "Environment: STAG"
          echo "Tag: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          # Add Mattermost/Slack notification here 